@merge module Identity {
    def providers: Array[SrdRef[Provider]];

    function findProvider(name: String): ref[Provider] {
        def i: Int;
        for i = 0, i < providers.getLength(), ++i {
            if providers(i).name == name return providers(i).obj;
        }
        return nullRef[Provider];
    }

    macro validateParam[param, ReturnType] {
        if param == "" return Possible[ReturnType].failure(createInvalidParamError("{{param}}"));
    }

    function authenticate(providerName: String, code: String, redirectUri: String): Possible[AuthenticationResponse] {
        validateParam[providerName, AuthenticationResponse];
        validateParam[code, AuthenticationResponse];
        validateParam[redirectUri, AuthenticationResponse];
        def provider: ref[Provider](findProvider(providerName));
        if provider~ptr == 0 return Possible[AuthenticationResponse].failure(createInvalidProviderError(providerName));
        return provider.authenticate(code, redirectUri);
    }

    function reauthenticate(providerName: String, refreshToken: String): Possible[AuthenticationResponse] {
        validateParam[providerName, AuthenticationResponse];
        validateParam[refreshToken, AuthenticationResponse];
        def provider: ref[Provider](findProvider(providerName));
        if provider~ptr == 0 return Possible[AuthenticationResponse].failure(createInvalidProviderError(providerName));
        return provider.reauthenticate(refreshToken);
    }

    function getUserInfo(providerName: String, accessToken: String): Possible[UserInfoResponse] {
        validateParam[providerName, UserInfoResponse];
        validateParam[accessToken, UserInfoResponse];
        def provider: ref[Provider](findProvider(providerName));
        if provider~ptr == 0 return Possible[UserInfoResponse].failure(createInvalidProviderError(providerName));
        return provider.getUserInfo(accessToken);
    }
}
