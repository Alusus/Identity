@merge module Identity {
    func makePostRequest(url: CharsPtr, formData: CharsPtr, result: ref[Json]): SrdRef[Error] {
        def curlHandle: ptr[Net.Curl] = Net.CurlEasy.init();
        if curlHandle == 0 {
            System.fail(1, "Curl initialization failed!\n");
        }

        def content: Net.ResponseContent;
        content.data = 0;
        content.size = 0;

        def headers: ptr[Net.CurlSlist] = 0;
        headers = Net.CurlSlist.append(headers, "Content-Type: application/x-www-form-urlencoded");

        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.URL, url);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.POST, 1i64);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.POSTFIELDS, formData);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.POSTFIELDSIZE, String.getLength(formData));
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.HTTPHEADER, headers);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.SSL_VERIFYPEER, 0i64);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.FOLLOWLOCATION, 1i64);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.WRITEDATA, content~ptr);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.WRITEFUNCTION, Net.responseCallback~ptr);

        def resultCode: Int = Net.CurlEasy.perform(curlHandle);
        if resultCode == Net.CurlCode.OK {
            def status: Int[64];
            Net.CurlEasy.getInfo(curlHandle, Net.CurlInfo.RESPONSE_CODE, status~ptr);
            Net.CurlEasy.cleanup(curlHandle);
            if status >= 200 and status < 300 {
                result = String(content.data, content.size);
                Memory.free(content.data);
                return SrdRef[Error]();
            } else {
                return HttpError.new(String("POST"), String(url), status);
            }
        }
        Net.CurlEasy.cleanup(curlHandle);
        if content.data != 0 Memory.free(content.data);
        return HttpError.new(String("POST"), String(url), 0);
    }

    func makeGetRequest(url: CharsPtr, header: CharsPtr, result: ref[Json]): SrdRef[Error] {
        def curlHandle: ptr[Net.Curl] = Net.CurlEasy.init();
        if curlHandle == 0 {
            System.fail(1, "Curl initialization failed!\n");
        }

        def content: Net.ResponseContent;
        content.data = 0;
        content.size = 0;

        if header != 0 {
            def headers: ptr[Net.CurlSlist] = 0;
            headers = Net.CurlSlist.append(headers, header);
            Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.HTTPHEADER, headers);
        }

        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.URL, url);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.SSL_VERIFYPEER, false);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.FOLLOWLOCATION, true);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.WRITEDATA, content~ptr);
        Net.CurlEasy.setOpt(curlHandle, Net.CurlOpt.WRITEFUNCTION, Net.responseCallback~ptr);
        def resultCode: Int = Net.CurlEasy.perform(curlHandle);
        if resultCode == Net.CurlCode.OK {
            def status: Int[64];
            Net.CurlEasy.getInfo(curlHandle, Net.CurlInfo.RESPONSE_CODE, status~ptr);
            Net.CurlEasy.cleanup(curlHandle);
            if status >= 200 and status < 300 {
                result = String(content.data, content.size);
                Memory.free(content.data);
                return SrdRef[Error]();
            } else {
                return HttpError.new(String("GET"), String(url), status);
            }
        }
        Net.CurlEasy.cleanup(curlHandle);
        if content.data != 0 Memory.free(content.data);
        return HttpError.new(String("POST"), String(url), 0);
    }
}
