@merge module Identity {
    def ErrorCodes: {
        def HTTP_ERROR: 1;
        def INVALID_PROVIDER: 2;
        def INVALID_PARAM: 3;
    };

    class HttpError {
        @injection def error: Error;
        def url: String;
        def method: String;
        def status: Int;

        handler (this: Error).getCode(): Int set_ptr {
            return ErrorCodes.HTTP_ERROR;
        }
        handler (this: Error).getMessage(): String set_ptr {
            return String.format(
                "HTTP request failed. Status Code: %i. Target: %s %s",
                this.status,
                this.method.buf,
                this.url.buf
            );
        }
        function new(m: String, u: String, s: Int): SrdRef[HttpError] {
            return SrdRef[HttpError].construct().{
                method = m;
                url = u;
                status = s;
            };
        }
    }

    func createInvalidProviderError(providerName: CharsPtr): SrdRef[GenericError] {
        return SrdRef[GenericError].construct().{
            code = ErrorCodes.INVALID_PROVIDER;
            message = String.format("Invalid provider: %s", providerName);
        };
    }

    func createInvalidParamError(paramName: CharsPtr): SrdRef[GenericError] {
        return SrdRef[GenericError].construct().{
            code = ErrorCodes.INVALID_PARAM;
            message = String.format("Invalid param: %s", paramName);
        };
    }
}
